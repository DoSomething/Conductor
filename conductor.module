<?php

/**
 * @file
 *   conductor.module provides a workflow editor with a GUI (or it will).
 */

/**
 * Implements hook_menu().
 */
function conductor_menu() {
  $items = array();
  $items['conductor/ajax'] = array(
    'title' => 'Conductor',
    'page callback' => 'conductor_ajax',
    'theme callback' => 'ajax_base_page_theme',
    'delivery callback' => 'ajax_deliver',
    'access callback' => TRUE,
    'description' => 'Ajax callback for workflow loading.',
    'type' => MENU_CALLBACK,
    'file' => 'includes/ajax.inc',
  );
  return $items;
}
 
/*
 * Implements hook_permission().
 */
function conductor_permission() {
  return array(
    'administer conductor workflows' => array(
      'title' => t('Administer workflows'),
      'description' => t('Access the conductor workflow administration pages.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function conductor_theme() {
  $theme = array();
  ctools_include('plugins');
  $activity_plugins = ctools_get_plugins('conductor', 'activity');
  foreach ($activity_plugins as $activity_name => $activity_plugin) {
    /*
    TODO: add the ability to setup custom rendering for each of your plugins.
    $theme['conductor_activity_' . $activity_name] = array(
    );
    */
  }
  return $theme;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function conductor_ctools_plugin_api() {
    return array('version' => 1.0);
}

/**
 * Implements conductor_ctools_plugin_type().
 */
function conductor_ctools_plugin_type() {
  return array(
    'activity' => array(
      'process' => 'conductor_activity_process',
      'child plugins' => TRUE,
    ),
  );
}

/**
 * Ensure an activity has a minimal set of data.
 */
function conductor_activity_process(&$plugin) {
  $plugin += array(
    'category' => t('Miscellaneous'),
    'description' => '',
  );
  drupal_alter('conductor_activity_process', $plugin);
  foreach (module_implements('conductor_activity_process') as $module) {
    // Enable other modules to modify the plugin data.
    $function = $module . '_conductor_activity_process';
    $function($plugin);
  }
}

/**
 * Implements hook_cetools_plugin_directory().
 *
 * @param string $owner
 *   The system name of the module owning the plugin type for which a base
 *   directory location is being requested.
 * @param string $plugin_type
 *   The name of the plugin type for which a base directory is being requested.
 * @return string
 *   The path where CTools' plugin system should search for plugin files,
 *   relative to your module's root. Omit leading and trailing slashes.
 */
function conductor_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'conductor') {
    return "plugins/$plugin_type";
  }
}

/**
 * Load a conductor activity handler.
 *
 * @param $activity
 *   A string representing the name of the actiivty plugin.
 */
function conductor_get_activity_handler($activity) {
  $handler = FALSE;
  ctools_include('plugins');
  $activity_plugin = ctools_get_plugins('conductor', 'activity', $activity);
  $class_name = ctools_plugin_get_class($activity_plugin, 'handler');
  if ($class_name != FALSE) {
    $handler = new $class_name;
  }
  return $handler;
}

/**
 * Menu callback to load a workflow via AJAX.
 */
function conductor_ajax() {
  if (isset($_REQUEST['conductor_name'])) {
  }
}
