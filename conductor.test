<?php
/**
 * @file
 *   Provides tests for the conductor module.
 */

/**
 * This class exists to test Conductor code itself.
 *
 * Note, we may have to be very tricky in this case because Conductor
 * relies very heavily on ctools and on the code registry, however in
 * theory if we manually load all appropriate dependencies (requiring
 * their files) we should be able to test the code isolated from the
 * rest of the environment.
 *
 * Note: These tests can not access the database nor files. Calling any
 * Drupal function that needs the database will throw exceptions. These
 * include watchdog(), module_implements(), module_invoke_all() etc.
 */
class ConductorUnitTestCase extends DrupalUnitTestCase {

  /**
   * An array to be used as our data store in our mock storage object.
   */
  protected $dataStore = array();

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array (
      'name' => t('Conductor API Unit tests'),
      'description' => t('Isolate the objects as much as possible and verify the API methods.'),
      'group' => t('Conductor'),
    );
  }

  /**
   * Implements DrupalUnitTestCase::setUp().
   */
  public function setUp() {
    parent::setUp();
    // Conductor relies heavily on the registry for autoloading, this function
    // loads all files specified in conductor's .info file to premptively load
    // all of the files we're likely to need.
    $info = drupal_parse_info_file(drupal_get_path('module', 'conductor') . '/conductor.info');
    // Include all files not already in the info file (because they're added by
    // ctools).
    $test_files = array(
      'plugins/activity/activity/ConductorActivity.class.php',
      'plugins/activity/start/ConductorActivityStart.class.php',
      'plugins/activity/end/ConductorActivityEnd.class.php',
      'plugins/activity/conditional/ConductorActivityConditional.class.php',
      'plugins/storage/database/ConductorStorageDatabase.class.php',
      'tests/includes/ConductorObserverTest.inc',
      'tests/plugins/storage/test/ConductorStorageTest.class.php',
      'tests/plugins/activity/pause_test/ConductorActivityPauseTest.class.php',
      'tests/conductor_tests.conductor_workflows.inc',
    );
    $files = array_merge($info['files'], $test_files);
    foreach ($files as $file) {
      require_once($file);
    }

  }

  /**
   * Test that a workflow successfully runs and completes.
   */
  public function testWorkflowRun() {
    // Create an array for tracking event history via our test observer.
    $history = array();
    $workflow = $this->instantiateWorkflowInstance('simple_parallel_activity_test', $history);
    if (get_class($workflow->getActivity('start')) == 'ConductorActivityStart') {
      $this->pass(t('Simple workflow instantiation is successful.'));
    }
    else {
      $this->fail(t('Something prevented workflow instantiation.'));
    }
    $workflow->run();
    $this->assertEqual($workflow->state->getStatus(), ConductorInstance::FINISHED, t('The workflow was marked successfully complete.'));
    $this->assertEqual(count($history['activateActivity']), 4, t('The appropriate number of activities were activated'));
    $this->assertEqual(count($history['completeActivity']), 4, t('The appropriate number of activities were completed'));
    $activityStates = $workflow->state->getActivityState();
    foreach ($activityStates as $activityState) {
      $this->assertEqual($activityState->getStatus(), ConductorActivityState::COMPLETED, t('The @name activity was marked complete.', array('@name' => $activityState->name)));
      $this->assertEqual($activityState->context, array('foo' => 'bar'), t('Context was successfully passed into the @name activity.', array('@name' => $activityState->name)));
    }
  }

  /**
   * Test that a workflow may successfully be suspended and resumed.
   *
   * Given that we have a simple wokflow with two parallel actions
   * and neither of the actions has a blocker
   * when we run the workflow
   * each action should be activated and properly complete.
   */
  public function testWorkSuspend() {
    // Create an array for tracking event history via our test observer.
    $history = array();
    $workflow = $this->instantiateWorkflowInstance('simple_parallel_activity_test', $history);
    if (get_class($workflow->getActivity('start')) == 'ConductorActivityStart') {
      $this->pass(t('Simple workflow instantiation is successful.'));
    }
    else {
      $this->fail(t('Something prevented workflow instantiation.'));
    }
    $workflow->run();
    $this->assertEqual($workflow->state->getStatus(), ConductorInstance::FINISHED, t('The workflow was marked successfully complete.'));
    $this->assertEqual(count($history['activityActivate']), 4, t('The appropriate number of activities were activated'));
    $this->assertEqual(count($history['activityComplete']), 4, t('The appropriate number of activities were completed'));
    $activityStates = $workflow->state->getActivityState();
    foreach ($activityStates as $activityState) {
      $this->assertEqual($activityState->getStatus(), ConductorActivityState::COMPLETED, t('The @name activity was marked complete.', array('@name' => $activityState->name)));
      $this->assertEqual($activityState->context, array('foo' => 'bar'), t('Context was successfully passed into the @name activity.', array('@name' => $activityState->name)));
    }
  }

  /**
   * Instantiate a workflow and populate it with state and context.
   */
  private function instantiateWorkflowInstance($name, array &$history) {
    $workflows = conductor_test_default_conductor_workflows();
    $workflow = $workflows[$name];
    // Create the context
    $context = array('foo' => 'bar');
    // Get the first activity, we will need it to set the initial context.
    $start = $workflow->getActivity('start');
    // Instantiate the workflow instance for processing.
    $instance = new ConductorInstance();
    // Instantiate our mock storage handler.
    $storage = new conductorStorageTest;
    // Provide our mock storage handler with an array to use as a persistent
    // data store.
    $storage->setDatabase($this->dataStore);
    // Set the storage handler for this instance.
    $instance->setStorage($storage);
    // Create a state object for the first activity.
    $startState = new ConductorActivityState($start, $instance);
    // Set the context.
    $startState->context = $context;
    // Add the activity's state to the workflow instance state.
    $instance->setActivityStates(array('start' => $startState));
    // Actually assign the workflow instance state to the workflow.
    $workflow->setState($instance);
    // Set up the observer for tracking workflow history in tests.
    $observer = new ConductorObserverTest;
    $observer->history = &$history;
    $workflow->state->registerObserver($observer);
    // If this test is run from drush and the verbose flag is set,
    // log helpful messages.
    if (drupal_is_cli() && function_exists('drush_command') && drush_get_option('verbose')) {
      $workflow->state->registerObserver(new ConductorLogDrush);
    }
    return $workflow;
  }

  /**
   * Method for testing plugins that are not provided by this module
   * because ctools can't load any plugin provided by a module that
   * isn't already present.
   */
  private function getActivity($path) {
    $static = drupal_static(__FUNCTION__, array());
    if (!isset($static[$path])) {
      require_once($path);
      if (isset($plugin['handler']['class'])) {
        $handler = new $plugin['handler']['class'];
        $handler->plugin_info = $plugin;
        $static[$path] = $handler;
      }
      else {
        $static[$path] = FALSE;
      }
    }
    return $static[$path];
  }
}

/**
 *
 */
class ConductorTestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array (
      'name' => t('Conductor API tests'),
      'description' => t('Verify that conductor workflows behave as expected with existing modules.'),
      'group' => t('Conductor'),
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    // Enable any module that you will need in your tests.
    parent::setUp('conductor');
  }

  public function testWorkflowRun() {
  }
}
