<?php
/**
 * @file
 *   Provides tests for the conductor module.
 */

/**
 * This class exists to test Conductor code itself.
 *
 * Note, we may have to be very tricky in this case because Conductor
 * relies very heavily on ctools and on the code registry, however in
 * theory if we manually load all appropriate dependencies (requiring
 * their files) we should be able to test the code isolated from the
 * rest of the environment.
 *
 * Note: These tests can not access the database nor files. Calling any
 * Drupal function that needs the database will throw exceptions. These
 * include watchdog(), module_implements(), module_invoke_all() etc.
 */
class ConductorUnitTestCase extends DrupalUnitTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array (
      'name' => t('Conductor API Unit tests'),
      'description' => t('Isolate the objects as much as possible and verify the API methods.'),
      'group' => t('Conductor'),
    );
  }

  /**
   * Implements DrupalUnitTestCase::setUp().
   */
  public function setUp() {
    parent::setUp();
    // Conductor relies heavily on the registry for autoloading, this function
    // loads all files specified in conductor's .info file to premptively load
    // all of the files we're likely to need.
    $info = drupal_parse_info_file(drupal_get_path('module', 'conductor') . '/conductor.info');
    // Include all files not already in the info file (because they're added by ctools).
    $test_files = array(
      'tests/includes/ConductorObserverTest.inc',
      'plugins/activity/activity/ConductorActivity.class.php',
      'plugins/activity/start/ConductorActivityStart.class.php',
      'plugins/activity/end/ConductorActivityEnd.class.php',
      'plugins/activity/conditional/ConductorActivityConditional.class.php',
      'plugins/storage/database/ConductorStorageDatabase.class.php',
    );
    $files = array_merge($info['files'], $test_files);
    foreach ($files as $file) {
      require_once($file);
    }

  }

  /**
   * Test that a workflow successfully runs and completes.
   */
  public function testWorkflowRun() {
    $workflow = $this->instantiateWorkflowWithState();
    if (get_class($workflow->getActivity('start')) == 'ConductorActivityStart') {
      $this->pass(t('Simple workflow instantiation is successful.'));
    }
    else {
      $this->fail(t('Something prevented workflow instantiation.'));
    }
    // Register our test observer and populate it with an array we can watch.
    $observer = new ConductorObserverTest;
    $history = array();
    $observer->history = &$history;
    $workflow->state->registerObserver($observer);
    $workflow->run();
    $this->assertEqual($workflow->state->getStatus(), ConductorInstance::FINISHED, t('The workflow was marked successfully complete.'));
    $this->assertEqual(count($history['activateActivity']), 4, t('The appropriate number of activities were activated'));
    $this->assertEqual(count($history['completeActivity']), 4, t('The appropriate number of activities were completed'));
    $activityStates = $workflow->state->getActivityState();
    foreach ($activityStates as $activityState) {
      $this->assertEqual($activityState->getStatus(), ConductorActivityState::COMPLETED, t('The @name activity was marked complete.', array('@name' => $activityState->name)));
      $this->assertEqual($activityState->context, array('foo' => 'bar'), t('Context was successfully passed into the @name activity.', array('@name' => $activityState->name)));
    }
  }

  /**
   * Instantiate the simplest possible conductor workflow.
   *
   * @return
   *   A ConductorWorkflow object populated with 2 activities.
   */
  private function instantiateWorkflow() {
    $workflow = new ConductorWorkflow;
    $workflow->wid = 'new';
    $workflow->name = 'example';
    $workflow->title = 'Example';
    $workflow->description = 'example';
    $workflow->api_version = '1.0';
    // Add and configure workflow activities.
    $activity = $workflow->newActivity('start');
    $activity->x = 280;
    $activity->y = 200;
    $activity->name = 'start';
    $activity->title = 'Start';
    $activity->outputs = array(
      'activity_2',
      'activity_3'
    );
    $activity->inputs = array();
    $activity = $workflow->newActivity('activity');
    $activity->x = 180;
    $activity->y = 100;
    $activity->name = 'activity_2';
    $activity->title = 'Activity 2';
    $activity->inputs = array(
      'start',
    );
    $activity->outputs = array(
      'end'
    );
    $activity = $workflow->newActivity('activity');
    $activity->x = 180;
    $activity->y = 100;
    $activity->name = 'activity_3';
    $activity->title = 'Activity 3';
    $activity->inputs = array(
      'start',
    );
    $activity->outputs = array(
      'end'
    );
    $activity = $workflow->newActivity('end');
    $activity->x = 380;
    $activity->y = 200;
    $activity->name = 'end';
    $activity->title = 'End';
    $activity->inputs = array(
      'activity_2',
      'activity_3'
    );
    $activity->outputs = array();
    return $workflow;
  }

  /**
   * Instantiate a workflow and populate it with state and context.
   */
  private function instantiateWorkflowWithState() {
    $workflow = $this->instantiateWorkflow();
    // Create the context
    $context = array('foo' => 'bar');
    // Get the first activity, we will need it to set the initial context.
    $start = $workflow->getActivity('start');
    // Instantiate the state for this workflow instance.
    $conductorState = new ConductorInstance();
    // Create a state object for the first activity.
    $startState = new ConductorActivityState($start, $conductorState);
    // Set the context.
    $startState->context = $context;
    // Add the activity's state to the workflow instance state.
    $conductorState->setActivityStates(array('start' => $startState));
    // Actually assign the workflow instance state to the workflow.
    $workflow->setState($conductorState);
    // Finally, start running this workflow.
    return $workflow;
  }
}

/**
 *
 */
class ConductorTestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array (
      'name' => t('Conductor API tests'),
      'description' => t('Verify that conductor workflows behave as expected with existing modules.'),
      'group' => t('Conductor'),
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    // Enable any module that you will need in your tests.
    parent::setUp('conductor');
  }

  public function testWorkflowRun() {
  }
}
