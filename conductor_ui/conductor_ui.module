<?php

/**
 * @file conductor_ui.module
 *   Provides the admin interface for Conductor.
 */

/**
 * Implements hook_menu().
 */
function conductor_ui_menu() {
  $items = array();
  // Note most of the Conductor UI is provided by a ctools
  // export_ui plugin.  The basic data is defined in plugins/export_ui/conductor_ui.inc
  // The class providing the functionality is in plugins/export_ui/conductor_ui.class.inc
  $items['conductor_ui/%ctools_js/activity'] = array(
      'title' => 'Activity',
      'page callback' => 'conductor_ui_activity_form',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme();
 */
function conductor_ui_theme() {
  return array(
    'conductor_activity' => array(
      'variables' => array(
        'name' => '',
        'title' => '',
        'class' => '',
        'drop_links' => '',
      ),
      'path' => drupal_get_path('module', 'conductor_ui') . '/theme',
      'template' => 'conductor-activity'
    ),
  );
}


/**
 * Implements hook_library().
 */
function conductor_ui_library() {
  // jsPlumb.
  //$path = drupal_get_path('module', 'conductor_ui') . '/js/jsplumb/js/1.3.2/';
  $path = drupal_get_path('module', 'conductor_ui') . '/js/';
  $libraries['jsplumb'] = array(
    'title' => 'jsPlumb',
    'website' => 'http://code.google.com/p/jsplumb/1.3.2/',
    'version' => '1.2.3',
    'js' => array(
      $path . 'jsPlumb-1.2.2-RC1.js' => array(),
      $path . 'jsPlumb-defaults-1.2.2-RC1.js' => array(),
      $path . 'jquery.jsPlumb-1.2.2-RC1.js' => array(),
    ),
/*
TODO: upgrade to the newer lib?
    'js' => array(
      $path . 'jsPlumb-1.3.2-RC1.js' => array(),
      $path . 'jquery.jsPlumb-1.3.2-RC1.js' => array(),
      $path . 'jsPlumb-defaults-1.3.2-RC1.js' => array(),
      $path . 'jsPlumb-renderers-canvas-1.3.2-RC1.js' => array(),
      $path . 'jsPlumb-renderers-svg-1.3.2-RC1.js' => array(),
      $path . 'jsPlumb-renderers-vml-1.3.2-RC1.js' => array(),
    ),
*/
    'dependencies' => array(
      array('system', 'jquery'),
      array('system', 'ui'),
      array('system', 'ui.draggable'),
      array('system', 'ui.droppable'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * @param string $owner
 *   The system name of the module owning the plugin type for which a base
 *   directory location is being requested.
 * @param string $plugin_type
 *   The name of the plugin type for which a base directory is being requested.
 * @return string
 *   The path where CTools' plugin system should search for plugin files,
 *   relative to your module's root. Omit leading and trailing slashes.
 */
function conductor_ui_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'export_ui') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_conductor_activity_process
 * TODO: Test this!
 */
function conductor_ui_conductor_activity_process(&$plugin) {
  $plugin += array(
    'conductor_ui_template' => 'conductor_activity',
  );
}

/**
 * Page callback to list all workflows.
 */
function conductor_ui_list() {
  return '';
}

/**
 * Page callback to add a new workflow.
 */
function conductor_ui_add_workflow_page() {

  drupal_set_title(t('Add a new Conductor workflow'));
  conductor_ui_add_js();
  conductor_ui_add_css();
  ctools_include('modal');
  ctools_include('object-cache');
  ctools_modal_add_js();
  conductor_ui_add_ctools_modal_style();

  $output = array();
  $output['workflow_element_panel'] = array(
    '#prefix' => '<div id="conductor-ui-toolbar">',
    '#suffix' => '</div>',
  );
  $output['workflow_element_panel']['add_activity'] = array(
    '#type' => 'markup',
    '#markup' => ctools_modal_text_button(t('+ Add Activity'), 'conductor_ui/nojs/activity', t('Add an actiivty to this workflow.'), 'ctools-modal-conductor-ui-style-style'),
  );
  $output['workflow_element_panel']['buttons'] = array(
    '#prefix' => '<div id="toolbar-buttons">',
    '#suffix' => '</div>',
  );
  $output['workflow_element_panel']['buttons']['save'] = array(
    '#value' => t('Save'),
    '#type' => 'button',
  );
  $output['workflow_element_panel']['buttons']['cancel'] = array(
    '#value' => t('Cancel'),
    '#type' => 'button',
  );
  $output['workflow_editor'] = array(
    '#prefix' => '<div id="conductor-workflow-editor">',
    '#suffix' => '</div>',
  );
  //if (!$workflow = ctools_object_cache_get('conductor_workflow', 'test')) {
    $workflow = conductor_ui_dev_workflow();
    ctools_object_cache_set('conductor_workflow', 'test', $workflow);
  //}
  $activities = $workflow->getActivities(); 
  $settings = array();
  $css = '';
  foreach ($activities as $name => $activity) {
    $class_name = 'conductor-ui-activity-' . conductor_ui_css_safe_class($activity->name);
    $settings['activities'][$name] = $activity;
    $activity->css_class = $class_name;
    $drop_links = theme('links__ctools_dropbutton', array('title' => t('Edit'), 'links' => $activity->getUILinks()));
    $output['workflow_editor'][$name] = array(
      '#name' => $activity->name,
      '#title' => $activity->title,
      '#class' => $class_name,
      '#drop_links' => $drop_links,
      '#theme' => 'conductor_activity',
      '#contextual_links' => array(
        'contextual_example' => array( 'contextual', array('foobars')),
      ),
    );
  }
  drupal_add_css($css, array('type' => 'inline'));
  drupal_add_js(array('conductor_ui' => $settings), array('type' => 'setting'));
  return $output;
}

/**
 * Retrieve configuration for a 
 * The default 
 */
function conductor_ui_add_ctools_modal_style() {
  // Create our own javascript that will be used to theme a modal.
  $sample_style = array(
    'conductor-ui-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 500,
        'height' => 300,
        'addWidth' => 20,
        'addHeight' => 15,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      'modalTheme' => 'CToolsSampleModal',
      'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
    ),
  );
  drupal_add_js($sample_style, 'setting');
}

function conductor_ui_activity_form($js = NULL, $step = NULL) {
  // TODO: Clean this all up.  Alot.
  if ($js) {
    ctools_include('modal');
    ctools_include('ajax');
  }
  $form = array();
  // TODO: This is really a workflow creation form, not an activity form.
  $form['human_name'] = array(
    '#type' => 'textfield',
    '#title' => t('workflow name'),
    '#required' => TRUE,
    '#size' => 32,
    '#default_value' => !empty($form_state['view']) ? $form_state['view']->human_name : '',
    '#maxlength' => 255,
  );
  $form['name'] = array(
    '#type' => 'machine_name',
    '#maxlength' => 32,
    '#machine_name' => array(
      'exists' => 'conductor_get_workflow',
      'source' => array('human_name'),
    ),
    '#description' => t('A unique machine-readable name for this View. It must only contain lowercase letters, numbers, and underscores.'),
  );

  $output = drupal_render($form);

  // If $output is FALSE, there was no actual form.
  if ($js) {
    // If javascript is active, we have to use a render array.
    $commands = array();
    if ($output === FALSE || !empty($form_state['complete'])) {
      // Dismiss the modal.
      $commands[] = ajax_command_html('#ctools-sample', $animal);
      $commands[] = ctools_modal_command_dismiss();
    }
    else if (!empty($form_state['cancel'])) {
      // If cancelling, return to the activity.
      $commands[] = ctools_modal_command_dismiss();
    }
    else {
      $commands = ctools_modal_form_render($form_state, $output);
    }
    print ajax_render($commands);
    exit;
  }
  else {
    if ($output === FALSE || !empty($form_state['complete'])) {
      return $animal;
    }
    else if (!empty($form_state['cancel'])) {
      drupal_goto('ctools_ajax_sample');
    }
    else {
      return $output;
    }
  }
}

/**
 * Convert any string into a CSS class.
 *
 * @param $name
 *   The string to be converted into a W3C standards compliant CSS class.
 *
 * @return
 *   The CSS class name.
 */
function conductor_ui_css_safe_class($name) {
  $class_name = preg_replace('/[^a-zA-Z0-9- ]/', '-', strtolower($name));
  $class_name = preg_replace('/\W+/', '-', $class_name);
  $class_name = preg_replace('/\s+/','-', $class_name); 
  return $class_name;
}

/**
 * Add required javascript for the conductor ui.
 */
function conductor_ui_add_js() {

  drupal_add_library('system', 'ui.draggable');

  // Include jsPlumb for drawing our lines
  drupal_add_library('conductor_ui', 'jsplumb');
  //drupal_add_js(drupal_get_path('module', 'conductor_ui') . '/js/jquery.jsPlumb-1.3.1-all-min.js');

  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');
  drupal_add_js('misc/ajax.js');
  ctools_modal_add_js();

  drupal_add_js(drupal_get_path('module', 'conductor_ui') . '/js/conductor_ui.js');
}

/**
 * Add required css for the conductor ui.
 */
function conductor_ui_add_css() {
  // The views styling for ctools buttons is nice, lets steal it.
  drupal_add_css(drupal_get_path('module', 'views') . '/css/views-admin.ctools.css');
  drupal_add_css(drupal_get_path('module', 'conductor_ui') . '/css/conductor_ui.css');
}

/**
 * Implements hook_conductor_default_workflows().
 */
function conductor_ui_default_conductor_workflows() {
  $workflows = array();
  $workflow = new ConductorWorkflow;
  $workflow->wid = 'new';
  $workflow->name = 'example';
  $workflow->title = 'Example';
  $workflow->description = 'example';
  $workflow->api_version = '1.0';
  // Add and configure workflow activities.
  $activity = $workflow->newActivity('start');
  $activity->x = 280;
  $activity->y = 200;
  $activity->name = 'activity_1';
  $activity->title = 'Activity 1';
  $activity->inputs = array(
    'activity_2'
  );
  $activity = $workflow->newActivity('activity');
  $activity->x = 180;
  $activity->y = 100;
  $activity->name = 'activity_2';
  $activity->title = 'Activity 2';
  $activity->inputs = array();
  $activity->outputs = array(
    'activity_1',
    'activity_3'
  );
  $activity = $workflow->newActivity('stop');
  $activity->x = 380;
  $activity->y = 200;
  $activity->name = 'activity_3';
  $activity->title = 'Activity 3';
  $activity->inputs = array(
    'activity_2'
  );
  $activity->outputs = array();
  $workflows[$workflow->name] = $workflow;
  return $workflows;
}

function conductor_ui_ctools_export_ui_form(&$form_state, &$form) {
  


}
function conductor_ui_ctools_export_ui_form_validate(&$form_state, &$form) {
}
function conductor_ui_ctools_export_ui_form_submit(&$form_state, &$form) {
}

/**
 * Specialized cache function to add a flag to our workflow, include an appropriate
 * include, and cache more easily.
 */
function conductor_ui_cache_set(&$workflow) {
  if (!empty($workflow->locked)) {
    drupal_set_message(t('Changes cannot be made to a locked workflow.'), 'error');
    return;
  }
  ctools_include('object-cache');
  $workflow->changed = TRUE; // let any future object know that this workflow has changed.

  // If there is any state information make sure it is not cached.
  unset($workflow->state);

  /*
   TODO: This is probably a good idea, we should avoid saving the handler code in the cache wherever we can.
   we should consider reorganizing the handlers the way views does where the activity_info is the root and
   the handler is an element in that array rather than the other way around.
  // Unset handlers; we don't want to write these into the cache
  unset($workflow->display_handler);
  unset($workflow->default_display);
  $workflow->query = NULL;
  foreach (array_keys($workflow->display) as $id) {
    unset($workflow->display[$id]->handler);
    unset($workflow->display[$id]->default_display);
  }
  */
  ctools_object_cache_set('workflow', $workflow->name, $workflow);
}

/**
 * Set breadcrumbs for admin pages in the Conductor UI
 *
 * @param $sub_path
 *   An array of additional breadcrumb entries to be added to the end of the base path.
 */
function conductor_ui_set_breadcrumb($sub_path = NULL) {
  $breadcrumb = array(
    l(t('Home'), NULL),
    l(t(' Administration'), 'admin'),
    l(t('Structure'), 'admin/structure'),
    l(t('Conductor Workflows'), 'admin/structure/conductor/list'),
  );
  if (!is_null($sub_path)) {
    $breadcrumb = array_merge($breadcrumb, $sub_path);
  }
  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Implements hook_ctools_plugin_api().
 */
function conductor_ui_ctools_plugin_api($owner, $api) {
  if ($owner == 'conductor' && $api == 'workflow') {
    return array('version' => 1.0);
  }
}
